// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 414xL5G8mL1Z1RMz34t6rd
// Component: LZBx-a4pO3ep
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useCurrentUser
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { AntdDropdown } from "@plasmicpkgs/antd5/skinny/registerDropdown";
import { AntdMenuItem } from "@plasmicpkgs/antd5/skinny/registerMenu";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 414xL5G8mL1Z1RMz34t6rd/projectcss
import sty from "./PlasmicDropdownButton.module.css"; // plasmic-import: LZBx-a4pO3ep/css

createPlasmicElementProxy;

export const PlasmicDropdownButton__VariantProps = new Array();

export const PlasmicDropdownButton__ArgProps = new Array();

const $$ = {};

function PlasmicDropdownButton__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        sty.root
      )}
    >
      <AntdDropdown
        data-plasmic-name={"dropdown"}
        data-plasmic-override={overrides.dropdown}
        className={classNames("__wab_instance", sty.dropdown)}
        dropdownMenuScopeClassName={sty["dropdown__dropdownMenu"]}
        menuItems={() => (
          <React.Fragment>
            <AntdMenuItem
              className={classNames("__wab_instance", sty.menuItem__gSwo)}
              key={"menu-item-1"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ejYjl
                )}
              >
                {"Menu item"}
              </div>
            </AntdMenuItem>
            <AntdMenuItem
              className={classNames("__wab_instance", sty.menuItem__l7Ynv)}
              key={"menu-item-2"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oMs1J
                )}
              >
                {"Menu item"}
              </div>
            </AntdMenuItem>
          </React.Fragment>
        )}
        menuItemsJson={[
          { type: "item", value: "action1", label: "Action 1" },
          { type: "item", value: "action2", label: "Action 2" }
        ]}
      >
        <AntdButton
          data-plasmic-name={"button"}
          data-plasmic-override={overrides.button}
          className={classNames("__wab_instance", sty.button)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yfaL7
            )}
          >
            {"Dropdown"}
          </div>
        </AntdButton>
      </AntdDropdown>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "dropdown", "button"],
  dropdown: ["dropdown", "button"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicDropdownButton__ArgProps,
          internalVariantPropNames: PlasmicDropdownButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicDropdownButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDropdownButton";
  } else {
    func.displayName = `PlasmicDropdownButton.${nodeName}`;
  }
  return func;
}

export const PlasmicDropdownButton = Object.assign(
  // Top-level PlasmicDropdownButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dropdown: makeNodeComponent("dropdown"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicDropdownButton
    internalVariantProps: PlasmicDropdownButton__VariantProps,
    internalArgProps: PlasmicDropdownButton__ArgProps
  }
);

export default PlasmicDropdownButton;
/* prettier-ignore-end */
