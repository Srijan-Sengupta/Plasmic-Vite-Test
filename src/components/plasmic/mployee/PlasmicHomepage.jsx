// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 414xL5G8mL1Z1RMz34t6rd
// Component: Qi2-aaOwtQFn
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import NavBar from "../../NavBar"; // plasmic-import: XOHEMOrDK2Yf/component
import { AntdBreadcrumb } from "@plasmicpkgs/antd5/skinny/registerBreadcrumb";
import { AntdBreadcrumbItem } from "@plasmicpkgs/antd5/skinny/registerBreadcrumb";
import { useScreenVariants as useScreenVariantspes9KtcBPvuU } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: pes9ktcBPvuU/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 414xL5G8mL1Z1RMz34t6rd/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: Qi2-aaOwtQFn/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspes9KtcBPvuU()
  });
  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root
        )}
      >
        <NavBar
          data-plasmic-name={"welcomeBar"}
          data-plasmic-override={overrides.welcomeBar}
          className={classNames("__wab_instance", sty.welcomeBar)}
        />

        <AntdBreadcrumb
          data-plasmic-name={"breadcrumb"}
          data-plasmic-override={overrides.breadcrumb}
          className={classNames("__wab_instance", sty.breadcrumb)}
          itemsRaw={
            <React.Fragment>
              <AntdBreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem__o5G7V
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__x83D
                  )}
                >
                  {"First"}
                </div>
              </AntdBreadcrumbItem>
              <AntdBreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem___29Nni
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__gQi4
                  )}
                >
                  {"Second"}
                </div>
              </AntdBreadcrumbItem>
              <AntdBreadcrumbItem
                className={classNames(
                  "__wab_instance",
                  sty.breadcrumbItem___2LfZq
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__yJ9Vr
                  )}
                >
                  {"Third"}
                </div>
              </AntdBreadcrumbItem>
            </React.Fragment>
          }
          separator={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jcA7
              )}
            >
              {"/"}
            </div>
          }
        />

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__cqX5
          )}
        >
          <React.Fragment>
            <React.Fragment>{""}</React.Fragment>
            {
              <blockquote
                data-plasmic-name={"blockquote"}
                data-plasmic-override={overrides.blockquote}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.blockquote
                )}
              >
                <React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ color: "#000000F7", fontWeight: 700 }}
                  >
                    {"WELCOME TO MPLOYEE"}
                  </span>
                </React.Fragment>
              </blockquote>
            }

            <React.Fragment>{""}</React.Fragment>
          </React.Fragment>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "welcomeBar", "breadcrumb", "blockquote"],
  welcomeBar: ["welcomeBar"],
  breadcrumb: ["breadcrumb"],
  blockquote: ["blockquote"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    welcomeBar: makeNodeComponent("welcomeBar"),
    breadcrumb: makeNodeComponent("breadcrumb"),
    blockquote: makeNodeComponent("blockquote"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "MPloyee",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
