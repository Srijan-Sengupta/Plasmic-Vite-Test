// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 414xL5G8mL1Z1RMz34t6rd
// Component: dPoyJMDGAOpt
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  hasVariant,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdTextArea } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 414xL5G8mL1Z1RMz34t6rd/projectcss
import sty from "./PlasmicLoginPage.module.css"; // plasmic-import: dPoyJMDGAOpt/css

createPlasmicElementProxy;

export const PlasmicLoginPage__VariantProps = new Array("vars");

export const PlasmicLoginPage__ArgProps = new Array();

const $$ = {};

function PlasmicLoginPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "vars",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.vars
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"mpolyeeLogin"}
          data-plasmic-override={overrides.mpolyeeLogin}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.mpolyeeLogin,
            {
              [sty.mpolyeeLoginvars_recruiterVar]: hasVariant(
                $state,
                "vars",
                "recruiterVar"
              )
            }
          )}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1,
              {
                [sty.h1vars_recruiterVar]: hasVariant(
                  $state,
                  "vars",
                  "recruiterVar"
                )
              }
            )}
          >
            {hasVariant($state, "vars", "recruiterVar")
              ? "Login As An Recruiter"
              : "Login As An Applicant"}
          </h1>
          <Reveal
            data-plasmic-name={"reveal"}
            data-plasmic-override={overrides.reveal}
            cascade={false}
            className={classNames("__wab_instance", sty.reveal)}
            effect={"zoom"}
            triggerOnce={true}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form),
                extendedOnValuesChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form", "value"],
                    FormWrapper_Helpers
                  ),
                formItems: undefined,
                labelCol: { span: 8, horizontalOnly: true },
                layout: "vertical",
                mode: undefined,
                onFinish: async values => {
                  const $steps = {};
                  $steps["updateStateVariable"] = true
                    ? (() => {
                        const actionArgs = {};
                        return (({
                          variable,
                          value,
                          startIndex,
                          deleteCount
                        }) => {
                          if (!variable) {
                            return;
                          }
                          const { objRoot, variablePath } = variable;
                          undefined;
                        })?.apply(null, [actionArgs]);
                      })()
                    : undefined;
                  if (
                    $steps["updateStateVariable"] != null &&
                    typeof $steps["updateStateVariable"] === "object" &&
                    typeof $steps["updateStateVariable"].then === "function"
                  ) {
                    $steps["updateStateVariable"] = await $steps[
                      "updateStateVariable"
                    ];
                  }
                },
                onIsSubmittingChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form", "isSubmitting"],
                    FormWrapper_Helpers
                  ),
                ref: ref => {
                  $refs["form"] = ref;
                },
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form.isSubmitting"
                  }
                ],

                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );
              return (
                <FormWrapper
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  {...child$Props}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__rJdws
                    )}
                    label={"Username/phone no/email id"}
                    name={"name"}
                    rules={[{ ruleType: "required" }]}
                  >
                    <AntdTextArea
                      className={classNames("__wab_instance", sty.textArea)}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__rQ2Jj
                    )}
                    label={"password"}
                    name={``}
                    rules={[
                      { ruleType: "min", length: 8 },
                      {
                        ruleType: "required",
                        options: (() => {
                          const __composite = [{ value: null }];
                          __composite["0"]["value"] = "_";
                          return __composite;
                        })()
                      }
                    ]}
                  >
                    <AntdPassword
                      className={classNames(
                        "__wab_instance",
                        sty.passwordInput
                      )}
                    />
                  </FormItemWrapper>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button)}
                    submitsForm={true}
                    type={"default"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"Submit"}
                    </div>
                  </AntdButton>
                </FormWrapper>
              );
            })()}
          </Reveal>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  mpolyeeLogin: [
    "mpolyeeLogin",
    "h1",
    "reveal",
    "form",
    "textArea",
    "passwordInput",
    "button",
    "text"
  ],

  h1: ["h1"],
  reveal: ["reveal", "form", "textArea", "passwordInput", "button", "text"],
  form: ["form", "textArea", "passwordInput", "button", "text"],
  textArea: ["textArea"],
  passwordInput: ["passwordInput"],
  button: ["button", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLoginPage__ArgProps,
          internalVariantPropNames: PlasmicLoginPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLoginPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mpolyeeLogin") {
    func.displayName = "PlasmicLoginPage";
  } else {
    func.displayName = `PlasmicLoginPage.${nodeName}`;
  }
  return func;
}

export const PlasmicLoginPage = Object.assign(
  // Top-level PlasmicLoginPage renders the root element
  makeNodeComponent("mpolyeeLogin"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    reveal: makeNodeComponent("reveal"),
    form: makeNodeComponent("form"),
    textArea: makeNodeComponent("textArea"),
    passwordInput: makeNodeComponent("passwordInput"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicLoginPage
    internalVariantProps: PlasmicLoginPage__VariantProps,
    internalArgProps: PlasmicLoginPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Mployee Login",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLoginPage;
/* prettier-ignore-end */
