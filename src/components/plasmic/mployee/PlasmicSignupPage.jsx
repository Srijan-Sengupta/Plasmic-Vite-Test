// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 414xL5G8mL1Z1RMz34t6rd
// Component: GAbxiwMmoQJw
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  hasVariant,
  initializeCodeComponentStates,
  useCurrentUser,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { FormItemWrapper } from "@plasmicpkgs/antd5/skinny/FormItem";
import { AntdInput } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdPassword } from "@plasmicpkgs/antd5/skinny/registerInput";
import { AntdDatePicker } from "@plasmicpkgs/antd5/skinny/registerDatePicker";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 414xL5G8mL1Z1RMz34t6rd/projectcss
import sty from "./PlasmicSignupPage.module.css"; // plasmic-import: GAbxiwMmoQJw/css

createPlasmicElementProxy;

export const PlasmicSignupPage__VariantProps = new Array("unnamedVariant");

export const PlasmicSignupPage__ArgProps = new Array();

const $$ = {};

function PlasmicSignupPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = useCurrentUser?.() || {};
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "unnamedVariant",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.unnamedVariant
      },
      {
        path: "form.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"mportalSignup"}
          data-plasmic-override={overrides.mportalSignup}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.mportalSignup,
            {
              [sty.mportalSignupunnamedVariant]: hasVariant(
                $state,
                "unnamedVariant",
                "unnamedVariant"
              )
            }
          )}
        >
          <Reveal
            className={classNames("__wab_instance", sty.reveal___0CRix)}
            triggerOnce={true}
          >
            {(() => {
              const child$Props = {
                className: classNames("__wab_instance", sty.form, {
                  [sty.formunnamedVariant]: hasVariant(
                    $state,
                    "unnamedVariant",
                    "unnamedVariant"
                  )
                }),
                extendedOnValuesChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "value",
                    ["form", "value"],
                    FormWrapper_Helpers
                  ),
                formItems: undefined,
                labelCol: { span: 8, horizontalOnly: true },
                layout: "horizontal",
                mode: undefined,
                onIsSubmittingChange:
                  generateStateOnChangePropForCodeComponents(
                    $state,
                    "isSubmitting",
                    ["form", "isSubmitting"],
                    FormWrapper_Helpers
                  ),
                ref: ref => {
                  $refs["form"] = ref;
                },
                wrapperCol: { span: 16, horizontalOnly: true }
              };
              initializeCodeComponentStates(
                $state,
                [
                  {
                    name: "value",
                    plasmicStateName: "form.value"
                  },
                  {
                    name: "isSubmitting",
                    plasmicStateName: "form.isSubmitting"
                  }
                ],

                [],
                FormWrapper_Helpers ?? {},
                child$Props
              );
              return (
                <FormWrapper
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  {...child$Props}
                >
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__olsGu
                    )}
                    label={"First Name"}
                    rules={[{ ruleType: "required" }]}
                  >
                    <AntdInput
                      className={classNames("__wab_instance", sty.input__aeM1B)}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__ox3Fu
                    )}
                    label={"Last Name"}
                    rules={[{ ruleType: "required" }]}
                  >
                    <AntdInput
                      className={classNames("__wab_instance", sty.input__gGqpq)}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__gsk2N
                    )}
                    label={"Email"}
                    rules={[
                      { ruleType: "required" },
                      {
                        ruleType: "enum",
                        options: (() => {
                          const __composite = [{ value: null }];
                          __composite["0"]["value"] = "@";
                          return __composite;
                        })(),
                        message: "unvalid email"
                      }
                    ]}
                  >
                    <AntdInput
                      className={classNames("__wab_instance", sty.input__iHxtn)}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__xEvj
                    )}
                    label={"Password"}
                    rules={[
                      { ruleType: "required" },
                      { ruleType: "min", length: 8 }
                    ]}
                  >
                    <AntdPassword
                      className={classNames(
                        "__wab_instance",
                        sty.passwordInput__dj50O
                      )}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField___74LuJ
                    )}
                    label={"Re enter password"}
                    rules={[
                      { ruleType: "required" },
                      { ruleType: "min", length: 8 }
                    ]}
                  >
                    <AntdPassword
                      className={classNames(
                        "__wab_instance",
                        sty.passwordInput__enRqN
                      )}
                    />
                  </FormItemWrapper>
                  <FormItemWrapper
                    className={classNames(
                      "__wab_instance",
                      sty.formField__gN5Zh
                    )}
                    label={"Date of birth"}
                    rules={[{ ruleType: "required" }]}
                  >
                    <AntdDatePicker
                      className={classNames(
                        "__wab_instance",
                        sty.dateTimePicker__rjJg
                      )}
                      popupScopeClassName={
                        sty["dateTimePicker__rjJg__datePickerPopup"]
                      }
                    />
                  </FormItemWrapper>
                  <AntdButton
                    className={classNames("__wab_instance", sty.button__z5OXv)}
                    submitsForm={true}
                    type={"default"}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2XByG
                      )}
                    >
                      {"Submit"}
                    </div>
                  </AntdButton>
                </FormWrapper>
              );
            })()}
          </Reveal>
          <Reveal
            className={classNames("__wab_instance", sty.reveal___18KjJ)}
            triggerOnce={true}
          >
            {(
              hasVariant($state, "unnamedVariant", "unnamedVariant")
                ? true
                : false
            )
              ? (() => {
                  const child$Props = {
                    className: classNames("__wab_instance", sty.form2, {
                      [sty.form2unnamedVariant]: hasVariant(
                        $state,
                        "unnamedVariant",
                        "unnamedVariant"
                      )
                    }),
                    extendedOnValuesChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "value",
                        ["form2", "value"],
                        FormWrapper_Helpers
                      ),
                    formItems: undefined,
                    labelCol: { span: 8, horizontalOnly: true },
                    layout: "horizontal",
                    mode: undefined,
                    onIsSubmittingChange:
                      generateStateOnChangePropForCodeComponents(
                        $state,
                        "isSubmitting",
                        ["form2", "isSubmitting"],
                        FormWrapper_Helpers
                      ),
                    ref: ref => {
                      $refs["form2"] = ref;
                    },
                    wrapperCol: { span: 16, horizontalOnly: true }
                  };
                  initializeCodeComponentStates(
                    $state,
                    [
                      {
                        name: "value",
                        plasmicStateName: "form2.value"
                      },
                      {
                        name: "isSubmitting",
                        plasmicStateName: "form2.isSubmitting"
                      }
                    ],

                    [],
                    FormWrapper_Helpers ?? {},
                    child$Props
                  );
                  return (
                    <FormWrapper
                      data-plasmic-name={"form2"}
                      data-plasmic-override={overrides.form2}
                      {...child$Props}
                    >
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__tTMyk
                        )}
                        label={"First Name"}
                        rules={[{ ruleType: "required" }]}
                      >
                        <AntdInput
                          className={classNames(
                            "__wab_instance",
                            sty.input___63J8H
                          )}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__fz6ZZ
                        )}
                        label={"Last Name"}
                        rules={[{ ruleType: "required" }]}
                      >
                        <AntdInput
                          className={classNames(
                            "__wab_instance",
                            sty.input__f5Kf0
                          )}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__eV8Do
                        )}
                        label={"Email"}
                        rules={[
                          { ruleType: "required" },
                          {
                            ruleType: "enum",
                            options: (() => {
                              const __composite = [{ value: null }];
                              __composite["0"]["value"] = "@";
                              return __composite;
                            })(),
                            message: "unvalid email"
                          }
                        ]}
                      >
                        <AntdInput
                          className={classNames(
                            "__wab_instance",
                            sty.input__a9Gq
                          )}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__ycmIk
                        )}
                        label={"Password"}
                        rules={[
                          { ruleType: "required" },
                          { ruleType: "min", length: 8 }
                        ]}
                      >
                        <AntdPassword
                          className={classNames(
                            "__wab_instance",
                            sty.passwordInput___3TzqX
                          )}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__ra7Pg
                        )}
                        label={"Re enter password"}
                        rules={[
                          { ruleType: "required" },
                          { ruleType: "min", length: 8 }
                        ]}
                      >
                        <AntdPassword
                          className={classNames(
                            "__wab_instance",
                            sty.passwordInput__avrVn
                          )}
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__fBnkC
                        )}
                        label={"Date of birth"}
                        rules={[{ ruleType: "required" }]}
                      >
                        <AntdDatePicker
                          className={classNames(
                            "__wab_instance",
                            sty.dateTimePicker__synpw
                          )}
                          popupScopeClassName={
                            sty["dateTimePicker__synpw__datePickerPopup"]
                          }
                        />
                      </FormItemWrapper>
                      <FormItemWrapper
                        className={classNames(
                          "__wab_instance",
                          sty.formField__pGgl7
                        )}
                        label={"Company name"}
                        rules={[{ ruleType: "required" }]}
                      >
                        <AntdInput
                          className={classNames(
                            "__wab_instance",
                            sty.input__alSh
                          )}
                        />
                      </FormItemWrapper>
                      <AntdButton
                        className={classNames(
                          "__wab_instance",
                          sty.button__yYuTt
                        )}
                        submitsForm={true}
                        type={"default"}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wucFx
                          )}
                        >
                          {"Submit"}
                        </div>
                      </AntdButton>
                    </FormWrapper>
                  );
                })()
              : null}
          </Reveal>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  mportalSignup: ["mportalSignup", "form", "form2"],
  form: ["form"],
  form2: ["form2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignupPage__ArgProps,
          internalVariantPropNames: PlasmicSignupPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignupPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mportalSignup") {
    func.displayName = "PlasmicSignupPage";
  } else {
    func.displayName = `PlasmicSignupPage.${nodeName}`;
  }
  return func;
}

export const PlasmicSignupPage = Object.assign(
  // Top-level PlasmicSignupPage renders the root element
  makeNodeComponent("mportalSignup"),
  {
    // Helper components rendering sub-elements
    form: makeNodeComponent("form"),
    form2: makeNodeComponent("form2"),
    // Metadata about props expected for PlasmicSignupPage
    internalVariantProps: PlasmicSignupPage__VariantProps,
    internalArgProps: PlasmicSignupPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignupPage;
/* prettier-ignore-end */
